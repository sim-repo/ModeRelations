//
//  AttackTurrelService.swift
//  ModeRelations
//
//  Created by Igor Ivanov on 12.11.2020.
//

import Foundation
import Combine

//MARK:- Aim
class ScoutAimService: Servicable {
    typealias Input = ScoutEntity
    typealias Output = ScoutEntity
    let serviceID: ServiceID = UUID()
    
    let pub = PassthroughSubject<Output, Never>()
    
    var representingMode: ModeKey {
        return ScoutMode.defenseMode(.pending(.aim)).getKey()
    }
    
    func subscribe() -> AnyPublisher<Output, Never> {
        return pub.eraseToAnyPublisher()
    }
    
    
    func request(subject: Input?, directive: ServiceDirective) {
        guard let subject = subject else { return }
        
        switch directive {
            case .doAction:
                dispatch(subject)
            case .doBreak:
                print("\(self): BREAK")
                self.pub.send(completion: .finished)
            case .doContinue:
                print("\(self): CONTINUE")
                self.pub.send(subject)
        }
    }
    
    
    private func dispatch(_ subject: Input) {
        switch subject.mode {
            case .defenseMode(.successful(.scan)):
                runAfterIdentification(subject)
            case .defenseMode(.successful(.attack)), .defenseMode(.failed(.attack)):
                runAfterAttack(subject)
            break
        default:
            break
        }
    }
}



extension ScoutAimService {
    
    func runAfterIdentification(_ subject: Input) {
        print("\nscout ID: \(subject.id) aim: ACTION_0 üéØ")
        ISB_to_ISB_seq(subject: subject, serviceID: serviceID) {contexts in
            subject.mode = .defenseMode(.running(.aim))
            
            // –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:
            contexts.sort{$0.object.kindID.rawValue > $1.object.kindID.rawValue} // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è 1-–Ω —Ä–∞–∑, —Ç–∫ —Å–µ—Ä–≤–∏—Å –ø–æ—Å–ª–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
           
            if let selectedContext =  contexts.first {
   
                subject.mode = .defenseMode(.successful(.aim))
                
                //–æ—Ç–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –º–µ–∂—Å–µ—Ä–≤–∏—Å–Ω—ã–π –±—É—Ñ–µ—Ä
                return selectedContext
            }
            return nil
        }
        self.pub.send(subject)
    }
    
    
    fileprivate func extractedFunc(_ subject: ScoutAimService.Input) {
        CSC_to_ISB_seq(subject: subject, serviceID: serviceID) {context in // –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—ç–ª–µ–º–µ–Ω—Ç–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —É–∂–µ –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            subject.mode = .defenseMode(.successful(.aim))
            //TODO: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–¥–µ—Å—å
            
        }
    }
    
    func runAfterAttack(_ subject: Input) {
        print("\nscout ID: \(subject.id) aim: ACTION_1 üéØ")
        subject.mode = .defenseMode(.pending(.aim))
        extractedFunc(subject)
        
        if subject.mode == .defenseMode(.pending(.aim)) {
            subject.mode = .defenseMode(.failed(.aim))
        }
        
        self.pub.send(subject)
    }
}




